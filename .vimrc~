set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'taghighlight'

Plugin 'majutsushi/tagbar'
nmap tb :TagbarToggle<CR> 
let g:tagbar_ctags_bin='ctags' "ctags程序的路径 
let g:tagbar_width=30 "窗口宽度的设置 
"map <F3> :Tagbar<CR> 
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() "如果是c语言的程序的话，tagbar自动开启

Plugin 'scrooloose/nerdtree' "文件资源管理器
nmap fb :NERDTreeToggle<CR>
let NERDTreeWinPos='left'
let NERDTreeWinSize=30
"map <F2> :NERDTreeToggle<CR>

""Plugin 'git://github.com/kien/ctrlp.vim.git'
Plugin 'kien/ctrlp.vim'
Plugin 'rhysd/vim-clang-format' "apt install clang-format
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

"map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
"autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

Plugin 'bling/vim-airline' "状态栏
set laststatus=2

""Plugin 'fholgado/minibufexpl.vim' 
""let g:miniBufExplMapWindowNavVim = 1 
""let g:miniBufExplMapWindowNavArrows = 1 
""let g:miniBufExplMapCTabSwitchBufs = 1 
""let g:miniBufExplModSelTarget = 1 
""let g:miniBufExplMoreThanOne=0 
""map <F11> :MBEbp<CR>
""map <F12> :MBEbn<CR>

Plugin 'vim-scripts/DoxygenToolkit.vim'
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
""Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
""Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
""Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'Valloric/YouCompleteMe'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just:PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax on

set nu
set backspace=2
set ts=4
set expandtab 
set smartindent
set shiftwidth=4
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gbk,latin1
set hls
"hi comment ctermfg=6
set cscopequickfix=s-,c-,d-,i-,t-,e-

func CFileTitle()
    call setline(1, "/**")
    call append(1, "* ".expand("%"))
    call append(2, "* wangkaichao@skyworth.com ".strftime("%Y-%m-%d"))
    call append(3, "*/")
endfunc

map title :call CFileTitle()<CR>

"inoremap { {}<LEFT>
"inoremap [ []<LEFT>
"inoremap ( ()<LEFT>
"inoremap " ""<LEFT>
"inoremap ' ''<LEFT>

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if has("autocmd")
  filetype plugin indent on
endif

set showmatch
set smartcase

"vimgdb
run macros/gdb_mappings.vim
set asm=0
set gdbprg=gdb
set splitbelow
set splitright

" YouCompleteme
"" 为当前补全选项在vim顶部增加预览窗口，用来显示函数原型等信息，
"" 如果vim的completeopt已经设置为prieview则不会有影响，
"" :h completeopt查看相关信息，用:set completeopt?查看当前vim的设置，默认为0
let g:ycm_add_preview_to_completeopt = 0
"" 开启YCM的显示诊断信息的功能，0表示关闭
let g:ycm_show_diagnostics_ui = 0
"" 
let g:ycm_server_log_level = 'info'
"" 设置要在标示符补全列表中显示的候选项的最小字符数，
"" 0表示没有限制，对语义补全无影响
let g:ycm_min_num_identifier_candidate_chars = 2
"" 让YCM可以收集注释中的文字来分析以用于补全，默认为0，
"" 只能收集代码中的文字来分析
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"" 打开字符串自动补全功能。0代表关闭。
"" 这用于c系语言中#include后列出头文件很有用，如果设置为0则关闭文件名补全功能
let g:ycm_complete_in_strings = 1
"" 设置强制启用语义补全的快捷键，有些系统函数如fopen, strcpy如果不智能提示，可以按+键
let g:ycm_key_invoke_completion = '<C-Space>'
"" 设置YCM语义触发器关键字
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }
"" 文件类型白名单，vim打开这些类型文件时会开启YCM。*表示所有文件类型
let g:ycm_filetype_whitelist = { '*': 1 }
"" 设置.ycm_extra_conf.py的全局路径，避免每次都需要复制到当前目录.
"" 若为空则每次都需复制.ycm_extra_conf.py文件到当前目录
"" cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py ~/
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"" 允许自动加载.ycm_extra_conf.py，不再提示.
"" 设置为1，则每次都提示用于确认该文件是否安全
let g:ycm_confirm_extra_conf = 0

